#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

extern crate libc;

//include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

/* automatically generated by rust-bindgen */

pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const SECRET_NUM: i32 = -1234;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = u32;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = u32;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = u32;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = u32;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = u32;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}gpu_index"]
    pub static mut gpu_index: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct metadata {
    pub classes: ::std::os::raw::c_int,
    pub names: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_metadata() {
    assert_eq!(
        ::std::mem::size_of::<metadata>(),
        16usize,
        concat!("Size of: ", stringify!(metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<metadata>())).classes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(metadata),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<metadata>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(metadata),
            "::",
            stringify!(names)
        )
    );
}
extern "C" {
    pub fn get_metadata(file: *mut ::std::os::raw::c_char) -> metadata;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tree {
    pub leaf: *mut ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub parent: *mut ::std::os::raw::c_int,
    pub child: *mut ::std::os::raw::c_int,
    pub group: *mut ::std::os::raw::c_int,
    pub name: *mut *mut ::std::os::raw::c_char,
    pub groups: ::std::os::raw::c_int,
    pub group_size: *mut ::std::os::raw::c_int,
    pub group_offset: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tree() {
    assert_eq!(
        ::std::mem::size_of::<tree>(),
        72usize,
        concat!("Size of: ", stringify!(tree))
    );
    assert_eq!(
        ::std::mem::align_of::<tree>(),
        8usize,
        concat!("Alignment of ", stringify!(tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).leaf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(leaf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).n as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tree), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).child as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).groups as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(groups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group_offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group_offset)
        )
    );
}
extern "C" {
    pub fn read_tree(filename: *mut ::std::os::raw::c_char) -> *mut tree;
}
pub const ACTIVATION_LOGISTIC: ACTIVATION = 0;
pub const ACTIVATION_RELU: ACTIVATION = 1;
pub const ACTIVATION_RELIE: ACTIVATION = 2;
pub const ACTIVATION_LINEAR: ACTIVATION = 3;
pub const ACTIVATION_RAMP: ACTIVATION = 4;
pub const ACTIVATION_TANH: ACTIVATION = 5;
pub const ACTIVATION_PLSE: ACTIVATION = 6;
pub const ACTIVATION_LEAKY: ACTIVATION = 7;
pub const ACTIVATION_ELU: ACTIVATION = 8;
pub const ACTIVATION_LOGGY: ACTIVATION = 9;
pub const ACTIVATION_STAIR: ACTIVATION = 10;
pub const ACTIVATION_HARDTAN: ACTIVATION = 11;
pub const ACTIVATION_LHTAN: ACTIVATION = 12;
pub const ACTIVATION_SELU: ACTIVATION = 13;
pub type ACTIVATION = u32;
pub const IMTYPE_PNG: IMTYPE = 0;
pub const IMTYPE_BMP: IMTYPE = 1;
pub const IMTYPE_TGA: IMTYPE = 2;
pub const IMTYPE_JPG: IMTYPE = 3;
pub type IMTYPE = u32;
pub const BINARY_ACTIVATION_MULT: BINARY_ACTIVATION = 0;
pub const BINARY_ACTIVATION_ADD: BINARY_ACTIVATION = 1;
pub const BINARY_ACTIVATION_SUB: BINARY_ACTIVATION = 2;
pub const BINARY_ACTIVATION_DIV: BINARY_ACTIVATION = 3;
pub type BINARY_ACTIVATION = u32;
pub const LAYER_TYPE_CONVOLUTIONAL: LAYER_TYPE = 0;
pub const LAYER_TYPE_DECONVOLUTIONAL: LAYER_TYPE = 1;
pub const LAYER_TYPE_CONNECTED: LAYER_TYPE = 2;
pub const LAYER_TYPE_MAXPOOL: LAYER_TYPE = 3;
pub const LAYER_TYPE_SOFTMAX: LAYER_TYPE = 4;
pub const LAYER_TYPE_DETECTION: LAYER_TYPE = 5;
pub const LAYER_TYPE_DROPOUT: LAYER_TYPE = 6;
pub const LAYER_TYPE_CROP: LAYER_TYPE = 7;
pub const LAYER_TYPE_ROUTE: LAYER_TYPE = 8;
pub const LAYER_TYPE_COST: LAYER_TYPE = 9;
pub const LAYER_TYPE_NORMALIZATION: LAYER_TYPE = 10;
pub const LAYER_TYPE_AVGPOOL: LAYER_TYPE = 11;
pub const LAYER_TYPE_LOCAL: LAYER_TYPE = 12;
pub const LAYER_TYPE_SHORTCUT: LAYER_TYPE = 13;
pub const LAYER_TYPE_ACTIVE: LAYER_TYPE = 14;
pub const LAYER_TYPE_RNN: LAYER_TYPE = 15;
pub const LAYER_TYPE_GRU: LAYER_TYPE = 16;
pub const LAYER_TYPE_LSTM: LAYER_TYPE = 17;
pub const LAYER_TYPE_CRNN: LAYER_TYPE = 18;
pub const LAYER_TYPE_BATCHNORM: LAYER_TYPE = 19;
pub const LAYER_TYPE_NETWORK: LAYER_TYPE = 20;
pub const LAYER_TYPE_XNOR: LAYER_TYPE = 21;
pub const LAYER_TYPE_REGION: LAYER_TYPE = 22;
pub const LAYER_TYPE_YOLO: LAYER_TYPE = 23;
pub const LAYER_TYPE_ISEG: LAYER_TYPE = 24;
pub const LAYER_TYPE_REORG: LAYER_TYPE = 25;
pub const LAYER_TYPE_UPSAMPLE: LAYER_TYPE = 26;
pub const LAYER_TYPE_LOGXENT: LAYER_TYPE = 27;
pub const LAYER_TYPE_L2NORM: LAYER_TYPE = 28;
pub const LAYER_TYPE_BLANK: LAYER_TYPE = 29;
pub type LAYER_TYPE = u32;
pub const COST_TYPE_SSE: COST_TYPE = 0;
pub const COST_TYPE_MASKED: COST_TYPE = 1;
pub const COST_TYPE_L1: COST_TYPE = 2;
pub const COST_TYPE_SEG: COST_TYPE = 3;
pub const COST_TYPE_SMOOTH: COST_TYPE = 4;
pub const COST_TYPE_WGAN: COST_TYPE = 5;
pub type COST_TYPE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct update_args {
    pub batch: ::std::os::raw::c_int,
    pub learning_rate: f32,
    pub momentum: f32,
    pub decay: f32,
    pub adam: ::std::os::raw::c_int,
    pub B1: f32,
    pub B2: f32,
    pub eps: f32,
    pub t: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_update_args() {
    assert_eq!(
        ::std::mem::size_of::<update_args>(),
        36usize,
        concat!("Size of: ", stringify!(update_args))
    );
    assert_eq!(
        ::std::mem::align_of::<update_args>(),
        4usize,
        concat!("Alignment of ", stringify!(update_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).batch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).learning_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(learning_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).momentum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(momentum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).decay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).adam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).B1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).B2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).eps as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).t as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(t)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer {
    pub type_: LAYER_TYPE,
    pub activation: ACTIVATION,
    pub cost_type: COST_TYPE,
    pub forward: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network)>,
    pub backward: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: update_args)>,
    pub forward_gpu: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network)>,
    pub backward_gpu: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network)>,
    pub update_gpu: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: update_args)>,
    pub batch_normalize: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
    pub batch: ::std::os::raw::c_int,
    pub forced: ::std::os::raw::c_int,
    pub flipped: ::std::os::raw::c_int,
    pub inputs: ::std::os::raw::c_int,
    pub outputs: ::std::os::raw::c_int,
    pub nweights: ::std::os::raw::c_int,
    pub nbiases: ::std::os::raw::c_int,
    pub extra: ::std::os::raw::c_int,
    pub truths: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub out_h: ::std::os::raw::c_int,
    pub out_w: ::std::os::raw::c_int,
    pub out_c: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub max_boxes: ::std::os::raw::c_int,
    pub groups: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub side: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub reverse: ::std::os::raw::c_int,
    pub flatten: ::std::os::raw::c_int,
    pub spatial: ::std::os::raw::c_int,
    pub pad: ::std::os::raw::c_int,
    pub sqrt: ::std::os::raw::c_int,
    pub flip: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub binary: ::std::os::raw::c_int,
    pub xnor: ::std::os::raw::c_int,
    pub steps: ::std::os::raw::c_int,
    pub hidden: ::std::os::raw::c_int,
    pub truth: ::std::os::raw::c_int,
    pub smooth: f32,
    pub dot: f32,
    pub angle: f32,
    pub jitter: f32,
    pub saturation: f32,
    pub exposure: f32,
    pub shift: f32,
    pub ratio: f32,
    pub learning_rate_scale: f32,
    pub clip: f32,
    pub noloss: ::std::os::raw::c_int,
    pub softmax: ::std::os::raw::c_int,
    pub classes: ::std::os::raw::c_int,
    pub coords: ::std::os::raw::c_int,
    pub background: ::std::os::raw::c_int,
    pub rescore: ::std::os::raw::c_int,
    pub objectness: ::std::os::raw::c_int,
    pub joint: ::std::os::raw::c_int,
    pub noadjust: ::std::os::raw::c_int,
    pub reorg: ::std::os::raw::c_int,
    pub log: ::std::os::raw::c_int,
    pub tanh: ::std::os::raw::c_int,
    pub mask: *mut ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub alpha: f32,
    pub beta: f32,
    pub kappa: f32,
    pub coord_scale: f32,
    pub object_scale: f32,
    pub noobject_scale: f32,
    pub mask_scale: f32,
    pub class_scale: f32,
    pub bias_match: ::std::os::raw::c_int,
    pub random: ::std::os::raw::c_int,
    pub ignore_thresh: f32,
    pub truth_thresh: f32,
    pub thresh: f32,
    pub focus: f32,
    pub classfix: ::std::os::raw::c_int,
    pub absolute: ::std::os::raw::c_int,
    pub onlyforward: ::std::os::raw::c_int,
    pub stopbackward: ::std::os::raw::c_int,
    pub dontload: ::std::os::raw::c_int,
    pub dontsave: ::std::os::raw::c_int,
    pub dontloadscales: ::std::os::raw::c_int,
    pub numload: ::std::os::raw::c_int,
    pub temperature: f32,
    pub probability: f32,
    pub scale: f32,
    pub cweights: *mut ::std::os::raw::c_char,
    pub indexes: *mut ::std::os::raw::c_int,
    pub input_layers: *mut ::std::os::raw::c_int,
    pub input_sizes: *mut ::std::os::raw::c_int,
    pub map: *mut ::std::os::raw::c_int,
    pub counts: *mut ::std::os::raw::c_int,
    pub sums: *mut *mut f32,
    pub rand: *mut f32,
    pub cost: *mut f32,
    pub state: *mut f32,
    pub prev_state: *mut f32,
    pub forgot_state: *mut f32,
    pub forgot_delta: *mut f32,
    pub state_delta: *mut f32,
    pub combine_cpu: *mut f32,
    pub combine_delta_cpu: *mut f32,
    pub concat: *mut f32,
    pub concat_delta: *mut f32,
    pub binary_weights: *mut f32,
    pub biases: *mut f32,
    pub bias_updates: *mut f32,
    pub scales: *mut f32,
    pub scale_updates: *mut f32,
    pub weights: *mut f32,
    pub weight_updates: *mut f32,
    pub delta: *mut f32,
    pub output: *mut f32,
    pub loss: *mut f32,
    pub squared: *mut f32,
    pub norms: *mut f32,
    pub spatial_mean: *mut f32,
    pub mean: *mut f32,
    pub variance: *mut f32,
    pub mean_delta: *mut f32,
    pub variance_delta: *mut f32,
    pub rolling_mean: *mut f32,
    pub rolling_variance: *mut f32,
    pub x: *mut f32,
    pub x_norm: *mut f32,
    pub m: *mut f32,
    pub v: *mut f32,
    pub bias_m: *mut f32,
    pub bias_v: *mut f32,
    pub scale_m: *mut f32,
    pub scale_v: *mut f32,
    pub z_cpu: *mut f32,
    pub r_cpu: *mut f32,
    pub h_cpu: *mut f32,
    pub prev_state_cpu: *mut f32,
    pub temp_cpu: *mut f32,
    pub temp2_cpu: *mut f32,
    pub temp3_cpu: *mut f32,
    pub dh_cpu: *mut f32,
    pub hh_cpu: *mut f32,
    pub prev_cell_cpu: *mut f32,
    pub cell_cpu: *mut f32,
    pub f_cpu: *mut f32,
    pub i_cpu: *mut f32,
    pub g_cpu: *mut f32,
    pub o_cpu: *mut f32,
    pub c_cpu: *mut f32,
    pub dc_cpu: *mut f32,
    pub binary_input: *mut f32,
    pub input_layer: *mut layer,
    pub self_layer: *mut layer,
    pub output_layer: *mut layer,
    pub reset_layer: *mut layer,
    pub update_layer: *mut layer,
    pub state_layer: *mut layer,
    pub input_gate_layer: *mut layer,
    pub state_gate_layer: *mut layer,
    pub input_save_layer: *mut layer,
    pub state_save_layer: *mut layer,
    pub input_state_layer: *mut layer,
    pub state_state_layer: *mut layer,
    pub input_z_layer: *mut layer,
    pub state_z_layer: *mut layer,
    pub input_r_layer: *mut layer,
    pub state_r_layer: *mut layer,
    pub input_h_layer: *mut layer,
    pub state_h_layer: *mut layer,
    pub wz: *mut layer,
    pub uz: *mut layer,
    pub wr: *mut layer,
    pub ur: *mut layer,
    pub wh: *mut layer,
    pub uh: *mut layer,
    pub uo: *mut layer,
    pub wo: *mut layer,
    pub uf: *mut layer,
    pub wf: *mut layer,
    pub ui: *mut layer,
    pub wi: *mut layer,
    pub ug: *mut layer,
    pub wg: *mut layer,
    pub softmax_tree: *mut tree,
    pub workspace_size: usize,
}
#[test]
fn bindgen_test_layout_layer() {
    assert_eq!(
        ::std::mem::size_of::<layer>(),
        1184usize,
        concat!("Size of: ", stringify!(layer))
    );
    assert_eq!(
        ::std::mem::align_of::<layer>(),
        8usize,
        concat!("Alignment of ", stringify!(layer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).activation as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(activation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cost_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cost_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forward as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).backward as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(backward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forward_gpu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forward_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).backward_gpu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(backward_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update_gpu as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).batch_normalize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(batch_normalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).shortcut as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(shortcut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).batch as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forced as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flipped as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flipped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).inputs as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).outputs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).nweights as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(nweights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).nbiases as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(nbiases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).extra as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truths as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).h as *const _ as usize },
        108usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).w as *const _ as usize },
        112usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).c as *const _ as usize },
        116usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_h as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_w as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_c as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).n as *const _ as usize },
        132usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).max_boxes as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(max_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).groups as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(groups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).size as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).side as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stride as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reverse as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flatten as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flatten)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).spatial as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(spatial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).pad as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sqrt as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sqrt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flip as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).index as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).xnor as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(xnor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).steps as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).hidden as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truth as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).smooth as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(smooth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dot as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).angle as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).jitter as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).saturation as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).exposure as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).shift as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ratio as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).learning_rate_scale as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(learning_rate_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).clip as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noloss as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).softmax as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(softmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).classes as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).coords as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).background as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rescore as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rescore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).objectness as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(objectness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).joint as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(joint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noadjust as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noadjust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reorg as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reorg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).log as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).tanh as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(tanh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mask as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).total as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).alpha as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).beta as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).kappa as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(kappa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).coord_scale as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(coord_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).object_scale as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(object_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noobject_scale as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noobject_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mask_scale as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mask_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).class_scale as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(class_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_match as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).random as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ignore_thresh as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ignore_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truth_thresh as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truth_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).thresh as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).focus as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(focus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).classfix as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(classfix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).absolute as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).onlyforward as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(onlyforward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stopbackward as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stopbackward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontload as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontsave as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontloadscales as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontloadscales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).numload as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(numload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temperature as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).probability as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(probability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cweights as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cweights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).indexes as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_layers as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_sizes as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).map as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).counts as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(counts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sums as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rand as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cost as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_state as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_state as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_delta as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_delta as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_cpu as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_delta_cpu as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_delta_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat_delta as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_weights as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_weights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).biases as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(biases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_updates as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scales as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_updates as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_updates as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).delta as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).loss as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(loss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).squared as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(squared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).norms as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(norms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).spatial_mean as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(spatial_mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_delta as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance_delta as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_mean as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_variance as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_variance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x as *const _ as usize },
        704usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x_norm as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(x_norm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).m as *const _ as usize },
        720usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(m))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).v as *const _ as usize },
        728usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_m as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_v as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_m as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_v as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).z_cpu as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(z_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).r_cpu as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(r_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).h_cpu as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(h_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_state_cpu as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_state_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp_cpu as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp2_cpu as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp2_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp3_cpu as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp3_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dh_cpu as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dh_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).hh_cpu as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(hh_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_cell_cpu as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_cell_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cell_cpu as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cell_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).f_cpu as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(f_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).i_cpu as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(i_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).g_cpu as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(g_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).o_cpu as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(o_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).c_cpu as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(c_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dc_cpu as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dc_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_input as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_layer as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).self_layer as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(self_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output_layer as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reset_layer as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reset_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update_layer as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_layer as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_gate_layer as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_gate_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_gate_layer as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_gate_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_save_layer as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_save_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_save_layer as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_save_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_state_layer as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_state_layer as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_z_layer as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_z_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_z_layer as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_z_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_r_layer as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_r_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_r_layer as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_r_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_h_layer as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_h_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_h_layer as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_h_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wz as *const _ as usize },
        1056usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uz as *const _ as usize },
        1064usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wr as *const _ as usize },
        1072usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ur as *const _ as usize },
        1080usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ur))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wh as *const _ as usize },
        1088usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uh as *const _ as usize },
        1096usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uo as *const _ as usize },
        1104usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wo as *const _ as usize },
        1112usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uf as *const _ as usize },
        1120usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wf as *const _ as usize },
        1128usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ui as *const _ as usize },
        1136usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ui))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wi as *const _ as usize },
        1144usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ug as *const _ as usize },
        1152usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ug))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wg as *const _ as usize },
        1160usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).softmax_tree as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(softmax_tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).workspace_size as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(workspace_size)
        )
    );
}
extern "C" {
    pub fn free_layer(arg1: layer);
}
pub const learning_rate_policy_CONSTANT: learning_rate_policy = 0;
pub const learning_rate_policy_STEP: learning_rate_policy = 1;
pub const learning_rate_policy_EXP: learning_rate_policy = 2;
pub const learning_rate_policy_POLY: learning_rate_policy = 3;
pub const learning_rate_policy_STEPS: learning_rate_policy = 4;
pub const learning_rate_policy_SIG: learning_rate_policy = 5;
pub const learning_rate_policy_RANDOM: learning_rate_policy = 6;
pub type learning_rate_policy = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network {
    pub n: ::std::os::raw::c_int,
    pub batch: ::std::os::raw::c_int,
    pub seen: *mut usize,
    pub t: *mut ::std::os::raw::c_int,
    pub epoch: f32,
    pub subdivisions: ::std::os::raw::c_int,
    pub layers: *mut layer,
    pub output: *mut f32,
    pub policy: learning_rate_policy,
    pub learning_rate: f32,
    pub momentum: f32,
    pub decay: f32,
    pub gamma: f32,
    pub scale: f32,
    pub power: f32,
    pub time_steps: ::std::os::raw::c_int,
    pub step: ::std::os::raw::c_int,
    pub max_batches: ::std::os::raw::c_int,
    pub scales: *mut f32,
    pub steps: *mut ::std::os::raw::c_int,
    pub num_steps: ::std::os::raw::c_int,
    pub burn_in: ::std::os::raw::c_int,
    pub adam: ::std::os::raw::c_int,
    pub B1: f32,
    pub B2: f32,
    pub eps: f32,
    pub inputs: ::std::os::raw::c_int,
    pub outputs: ::std::os::raw::c_int,
    pub truths: ::std::os::raw::c_int,
    pub notruth: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub max_crop: ::std::os::raw::c_int,
    pub min_crop: ::std::os::raw::c_int,
    pub max_ratio: f32,
    pub min_ratio: f32,
    pub center: ::std::os::raw::c_int,
    pub angle: f32,
    pub aspect: f32,
    pub exposure: f32,
    pub saturation: f32,
    pub hue: f32,
    pub random: ::std::os::raw::c_int,
    pub gpu_index: ::std::os::raw::c_int,
    pub hierarchy: *mut tree,
    pub input: *mut f32,
    pub truth: *mut f32,
    pub delta: *mut f32,
    pub workspace: *mut f32,
    pub train: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub cost: *mut f32,
    pub clip: f32,
}
#[test]
fn bindgen_test_layout_network() {
    assert_eq!(
        ::std::mem::size_of::<network>(),
        272usize,
        concat!("Size of: ", stringify!(network))
    );
    assert_eq!(
        ::std::mem::align_of::<network>(),
        8usize,
        concat!("Alignment of ", stringify!(network))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).batch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).seen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(seen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).epoch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(epoch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).subdivisions as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(subdivisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).layers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).output as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).policy as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).learning_rate as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(learning_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).momentum as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(momentum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).decay as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).gamma as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).scale as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).power as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).time_steps as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(time_steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).step as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_batches as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_batches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).scales as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).steps as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).num_steps as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(num_steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).burn_in as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(burn_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).adam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).B1 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).B2 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).eps as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).inputs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).outputs as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).truths as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(truths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).notruth as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(notruth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).h as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).w as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).c as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_crop as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_crop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).min_crop as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(min_crop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_ratio as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).min_ratio as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(min_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).center as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).angle as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).aspect as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).exposure as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).saturation as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).hue as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(hue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).random as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).gpu_index as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(gpu_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).hierarchy as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(hierarchy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).truth as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(truth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).workspace as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(workspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).train as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(train)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).index as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cost as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).clip as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(clip)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct augment_args {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub scale: f32,
    pub rad: f32,
    pub dx: f32,
    pub dy: f32,
    pub aspect: f32,
}
#[test]
fn bindgen_test_layout_augment_args() {
    assert_eq!(
        ::std::mem::size_of::<augment_args>(),
        28usize,
        concat!("Size of: ", stringify!(augment_args))
    );
    assert_eq!(
        ::std::mem::align_of::<augment_args>(),
        4usize,
        concat!("Alignment of ", stringify!(augment_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).scale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).rad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(rad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).dx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).dy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<augment_args>())).aspect as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(augment_args),
            "::",
            stringify!(aspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct image {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub data: *mut f32,
}
#[test]
fn bindgen_test_layout_image() {
    assert_eq!(
        ::std::mem::size_of::<image>(),
        24usize,
        concat!("Size of: ", stringify!(image))
    );
    assert_eq!(
        ::std::mem::align_of::<image>(),
        8usize,
        concat!("Alignment of ", stringify!(image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).w as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).h as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(image),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct box_ {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[test]
fn bindgen_test_layout_box_() {
    assert_eq!(
        ::std::mem::size_of::<box_>(),
        16usize,
        concat!("Size of: ", stringify!(box_))
    );
    assert_eq!(
        ::std::mem::align_of::<box_>(),
        4usize,
        concat!("Alignment of ", stringify!(box_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).w as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).h as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(h))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct detection {
    pub bbox: box_,
    pub classes: ::std::os::raw::c_int,
    pub prob: *mut f32,
    pub mask: *mut f32,
    pub objectness: f32,
    pub sort_class: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_detection() {
    assert_eq!(
        ::std::mem::size_of::<detection>(),
        48usize,
        concat!("Size of: ", stringify!(detection))
    );
    assert_eq!(
        ::std::mem::align_of::<detection>(),
        8usize,
        concat!("Alignment of ", stringify!(detection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).bbox as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(bbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).classes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).prob as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).objectness as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(objectness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).sort_class as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(sort_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matrix {
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub vals: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_matrix() {
    assert_eq!(
        ::std::mem::size_of::<matrix>(),
        16usize,
        concat!("Size of: ", stringify!(matrix))
    );
    assert_eq!(
        ::std::mem::align_of::<matrix>(),
        8usize,
        concat!("Alignment of ", stringify!(matrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).rows as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).cols as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).vals as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(vals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub X: matrix,
    pub y: matrix,
    pub shallow: ::std::os::raw::c_int,
    pub num_boxes: *mut ::std::os::raw::c_int,
    pub boxes: *mut *mut box_,
}
#[test]
fn bindgen_test_layout_data() {
    assert_eq!(
        ::std::mem::size_of::<data>(),
        64usize,
        concat!("Size of: ", stringify!(data))
    );
    assert_eq!(
        ::std::mem::align_of::<data>(),
        8usize,
        concat!("Alignment of ", stringify!(data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).w as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).h as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).X as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(X))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).y as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).shallow as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(shallow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).num_boxes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(num_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).boxes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(boxes)
        )
    );
}
pub const data_type_CLASSIFICATION_DATA: data_type = 0;
pub const data_type_DETECTION_DATA: data_type = 1;
pub const data_type_CAPTCHA_DATA: data_type = 2;
pub const data_type_REGION_DATA: data_type = 3;
pub const data_type_IMAGE_DATA: data_type = 4;
pub const data_type_COMPARE_DATA: data_type = 5;
pub const data_type_WRITING_DATA: data_type = 6;
pub const data_type_SWAG_DATA: data_type = 7;
pub const data_type_TAG_DATA: data_type = 8;
pub const data_type_OLD_CLASSIFICATION_DATA: data_type = 9;
pub const data_type_STUDY_DATA: data_type = 10;
pub const data_type_DET_DATA: data_type = 11;
pub const data_type_SUPER_DATA: data_type = 12;
pub const data_type_LETTERBOX_DATA: data_type = 13;
pub const data_type_REGRESSION_DATA: data_type = 14;
pub const data_type_SEGMENTATION_DATA: data_type = 15;
pub const data_type_INSTANCE_DATA: data_type = 16;
pub const data_type_ISEG_DATA: data_type = 17;
pub type data_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_args {
    pub threads: ::std::os::raw::c_int,
    pub paths: *mut *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub n: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
    pub labels: *mut *mut ::std::os::raw::c_char,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub out_w: ::std::os::raw::c_int,
    pub out_h: ::std::os::raw::c_int,
    pub nh: ::std::os::raw::c_int,
    pub nw: ::std::os::raw::c_int,
    pub num_boxes: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub classes: ::std::os::raw::c_int,
    pub background: ::std::os::raw::c_int,
    pub scale: ::std::os::raw::c_int,
    pub center: ::std::os::raw::c_int,
    pub coords: ::std::os::raw::c_int,
    pub jitter: f32,
    pub angle: f32,
    pub aspect: f32,
    pub saturation: f32,
    pub exposure: f32,
    pub hue: f32,
    pub d: *mut data,
    pub im: *mut image,
    pub resized: *mut image,
    pub type_: data_type,
    pub hierarchy: *mut tree,
}
#[test]
fn bindgen_test_layout_load_args() {
    assert_eq!(
        ::std::mem::size_of::<load_args>(),
        168usize,
        concat!("Size of: ", stringify!(load_args))
    );
    assert_eq!(
        ::std::mem::align_of::<load_args>(),
        8usize,
        concat!("Alignment of ", stringify!(load_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).threads as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).paths as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(paths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).path as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).n as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).m as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).labels as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).h as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).w as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).out_w as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(out_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).out_h as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(out_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).nh as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).nw as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).num_boxes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(num_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).min as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).max as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).size as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).classes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).background as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).scale as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).center as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).coords as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).jitter as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).angle as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).aspect as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).saturation as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).exposure as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).hue as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(hue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).d as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).im as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(im)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).resized as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(resized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).type_ as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).hierarchy as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(hierarchy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct box_label {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
    pub left: f32,
    pub right: f32,
    pub top: f32,
    pub bottom: f32,
}
#[test]
fn bindgen_test_layout_box_label() {
    assert_eq!(
        ::std::mem::size_of::<box_label>(),
        36usize,
        concat!("Size of: ", stringify!(box_label))
    );
    assert_eq!(
        ::std::mem::align_of::<box_label>(),
        4usize,
        concat!("Alignment of ", stringify!(box_label))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).h as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).left as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).top as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).bottom as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(bottom)
        )
    );
}
extern "C" {
    pub fn load_network(
        cfg: *mut ::std::os::raw::c_char,
        weights: *mut ::std::os::raw::c_char,
        clear: ::std::os::raw::c_int,
    ) -> *mut network;
}
extern "C" {
    pub fn get_base_args(net: *mut network) -> load_args;
}
extern "C" {
    pub fn free_data(d: data);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node {
    pub val: *mut ::std::os::raw::c_void,
    pub next: *mut node,
    pub prev: *mut node,
}
#[test]
fn bindgen_test_layout_node() {
    assert_eq!(
        ::std::mem::size_of::<node>(),
        24usize,
        concat!("Size of: ", stringify!(node))
    );
    assert_eq!(
        ::std::mem::align_of::<node>(),
        8usize,
        concat!("Alignment of ", stringify!(node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).val as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(node), "::", stringify!(val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list {
    pub size: ::std::os::raw::c_int,
    pub front: *mut node,
    pub back: *mut node,
}
#[test]
fn bindgen_test_layout_list() {
    assert_eq!(
        ::std::mem::size_of::<list>(),
        24usize,
        concat!("Size of: ", stringify!(list))
    );
    assert_eq!(
        ::std::mem::align_of::<list>(),
        8usize,
        concat!("Alignment of ", stringify!(list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list>())).front as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list),
            "::",
            stringify!(front)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list>())).back as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(list),
            "::",
            stringify!(back)
        )
    );
}
extern "C" {
    pub fn load_data(args: load_args) -> pthread_t;
}
extern "C" {
    pub fn read_data_cfg(filename: *mut ::std::os::raw::c_char) -> *mut list;
}
extern "C" {
    pub fn read_cfg(filename: *mut ::std::os::raw::c_char) -> *mut list;
}
extern "C" {
    pub fn read_file(filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn resize_data(orig: data, w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> data;
}
extern "C" {
    pub fn tile_data(
        orig: data,
        divs: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> *mut data;
}
extern "C" {
    pub fn select_data(orig: *mut data, inds: *mut ::std::os::raw::c_int) -> data;
}
extern "C" {
    pub fn forward_network(net: *mut network);
}
extern "C" {
    pub fn backward_network(net: *mut network);
}
extern "C" {
    pub fn update_network(net: *mut network);
}
extern "C" {
    pub fn dot_cpu(
        N: ::std::os::raw::c_int,
        X: *mut f32,
        INCX: ::std::os::raw::c_int,
        Y: *mut f32,
        INCY: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn axpy_cpu(
        N: ::std::os::raw::c_int,
        ALPHA: f32,
        X: *mut f32,
        INCX: ::std::os::raw::c_int,
        Y: *mut f32,
        INCY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn copy_cpu(
        N: ::std::os::raw::c_int,
        X: *mut f32,
        INCX: ::std::os::raw::c_int,
        Y: *mut f32,
        INCY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn scal_cpu(N: ::std::os::raw::c_int, ALPHA: f32, X: *mut f32, INCX: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fill_cpu(N: ::std::os::raw::c_int, ALPHA: f32, X: *mut f32, INCX: ::std::os::raw::c_int);
}
extern "C" {
    pub fn normalize_cpu(
        x: *mut f32,
        mean: *mut f32,
        variance: *mut f32,
        batch: ::std::os::raw::c_int,
        filters: ::std::os::raw::c_int,
        spatial: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn softmax(
        input: *mut f32,
        n: ::std::os::raw::c_int,
        temp: f32,
        stride: ::std::os::raw::c_int,
        output: *mut f32,
    );
}
extern "C" {
    pub fn best_3d_shift_r(
        a: image,
        b: image,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_label(
        characters: *mut *mut image,
        string: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn draw_label(
        a: image,
        r: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        label: image,
        rgb: *const f32,
    );
}
extern "C" {
    pub fn save_image(im: image, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn save_image_options(
        im: image,
        name: *const ::std::os::raw::c_char,
        f: IMTYPE,
        quality: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_next_batch(
        d: data,
        n: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_int,
        X: *mut f32,
        y: *mut f32,
    );
}
extern "C" {
    pub fn grayscale_image_3c(im: image);
}
extern "C" {
    pub fn normalize_image(p: image);
}
extern "C" {
    pub fn matrix_to_csv(m: matrix);
}
extern "C" {
    pub fn train_network_sgd(net: *mut network, d: data, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rgbgr_image(im: image);
}
extern "C" {
    pub fn copy_data(d: data) -> data;
}
extern "C" {
    pub fn concat_data(d1: data, d2: data) -> data;
}
extern "C" {
    pub fn load_cifar10_data(filename: *mut ::std::os::raw::c_char) -> data;
}
extern "C" {
    pub fn matrix_topk_accuracy(truth: matrix, guess: matrix, k: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn matrix_add_matrix(from: matrix, to: matrix);
}
extern "C" {
    pub fn scale_matrix(m: matrix, scale: f32);
}
extern "C" {
    pub fn csv_to_matrix(filename: *mut ::std::os::raw::c_char) -> matrix;
}
extern "C" {
    pub fn network_accuracies(net: *mut network, d: data, n: ::std::os::raw::c_int) -> *mut f32;
}
extern "C" {
    pub fn train_network_datum(net: *mut network) -> f32;
}
extern "C" {
    pub fn make_random_image(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn denormalize_connected_layer(l: layer);
}
extern "C" {
    pub fn denormalize_convolutional_layer(l: layer);
}
extern "C" {
    pub fn statistics_connected_layer(l: layer);
}
extern "C" {
    pub fn rescale_weights(l: layer, scale: f32, trans: f32);
}
extern "C" {
    pub fn rgbgr_weights(l: layer);
}
extern "C" {
    pub fn get_weights(l: layer) -> *mut image;
}
extern "C" {
    pub fn demo(
        cfgfile: *mut ::std::os::raw::c_char,
        weightfile: *mut ::std::os::raw::c_char,
        thresh: f32,
        cam_index: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        names: *mut *mut ::std::os::raw::c_char,
        classes: ::std::os::raw::c_int,
        frame_skip: ::std::os::raw::c_int,
        prefix: *mut ::std::os::raw::c_char,
        avg: ::std::os::raw::c_int,
        hier_thresh: f32,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fps: ::std::os::raw::c_int,
        fullscreen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_detection_detections(
        l: layer,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thresh: f32,
        dets: *mut detection,
    );
}
extern "C" {
    pub fn option_find_str(
        l: *mut list,
        key: *mut ::std::os::raw::c_char,
        def: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn option_find_int(
        l: *mut list,
        key: *mut ::std::os::raw::c_char,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn option_find_int_quiet(
        l: *mut list,
        key: *mut ::std::os::raw::c_char,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_network_cfg(filename: *mut ::std::os::raw::c_char) -> *mut network;
}
extern "C" {
    pub fn save_weights(net: *mut network, filename: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn load_weights(net: *mut network, filename: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn save_weights_upto(
        net: *mut network,
        filename: *mut ::std::os::raw::c_char,
        cutoff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn load_weights_upto(
        net: *mut network,
        filename: *mut ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        cutoff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zero_objectness(l: layer);
}
extern "C" {
    pub fn get_region_detections(
        l: layer,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        netw: ::std::os::raw::c_int,
        neth: ::std::os::raw::c_int,
        thresh: f32,
        map: *mut ::std::os::raw::c_int,
        tree_thresh: f32,
        relative: ::std::os::raw::c_int,
        dets: *mut detection,
    );
}
extern "C" {
    pub fn get_yolo_detections(
        l: layer,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        netw: ::std::os::raw::c_int,
        neth: ::std::os::raw::c_int,
        thresh: f32,
        map: *mut ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
        dets: *mut detection,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_network(net: *mut network);
}
extern "C" {
    pub fn set_batch_network(net: *mut network, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_temp_network(net: *mut network, t: f32);
}
extern "C" {
    pub fn load_image(
        filename: *mut ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn load_image_color(
        filename: *mut ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn make_image(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn resize_image(im: image, w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn censor_image(
        im: image,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn letterbox_image(im: image, w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn crop_image(
        im: image,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn center_crop_image(
        im: image,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn resize_min(im: image, min: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn resize_max(im: image, max: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn threshold_image(im: image, thresh: f32) -> image;
}
extern "C" {
    pub fn mask_to_rgb(mask: image) -> image;
}
extern "C" {
    pub fn resize_network(
        net: *mut network,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_matrix(m: matrix);
}
extern "C" {
    pub fn test_resize(filename: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn show_image(
        p: image,
        name: *const ::std::os::raw::c_char,
        ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_image(p: image) -> image;
}
extern "C" {
    pub fn draw_box_width(
        a: image,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        r: f32,
        g: f32,
        b: f32,
    );
}
extern "C" {
    pub fn get_current_rate(net: *mut network) -> f32;
}
extern "C" {
    pub fn composite_3d(
        f1: *mut ::std::os::raw::c_char,
        f2: *mut ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        delta: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn load_data_old(
        paths: *mut *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        labels: *mut *mut ::std::os::raw::c_char,
        k: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> data;
}
extern "C" {
    pub fn get_current_batch(net: *mut network) -> usize;
}
extern "C" {
    pub fn constrain_image(im: image);
}
extern "C" {
    pub fn get_network_image_layer(net: *mut network, i: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn get_network_output_layer(net: *mut network) -> layer;
}
extern "C" {
    pub fn top_predictions(
        net: *mut network,
        n: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn flip_image(a: image);
}
extern "C" {
    pub fn float_to_image(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        data: *mut f32,
    ) -> image;
}
extern "C" {
    pub fn ghost_image(
        source: image,
        dest: image,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn network_accuracy(net: *mut network, d: data) -> f32;
}
extern "C" {
    pub fn random_distort_image(im: image, hue: f32, saturation: f32, exposure: f32);
}
extern "C" {
    pub fn fill_image(m: image, s: f32);
}
extern "C" {
    pub fn grayscale_image(im: image) -> image;
}
extern "C" {
    pub fn rotate_image_cw(im: image, times: ::std::os::raw::c_int);
}
extern "C" {
    pub fn what_time_is_it_now() -> f64;
}
extern "C" {
    pub fn rotate_image(m: image, rad: f32) -> image;
}
extern "C" {
    pub fn visualize_network(net: *mut network);
}
extern "C" {
    pub fn box_iou(a: box_, b: box_) -> f32;
}
extern "C" {
    pub fn load_all_cifar10() -> data;
}
extern "C" {
    pub fn read_boxes(
        filename: *mut ::std::os::raw::c_char,
        n: *mut ::std::os::raw::c_int,
    ) -> *mut box_label;
}
extern "C" {
    pub fn float_to_box(f: *mut f32, stride: ::std::os::raw::c_int) -> box_;
}
extern "C" {
    pub fn draw_detections(
        im: image,
        dets: *mut detection,
        num: ::std::os::raw::c_int,
        thresh: f32,
        names: *mut *mut ::std::os::raw::c_char,
        alphabet: *mut *mut image,
        classes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn network_predict_data(net: *mut network, test: data) -> matrix;
}
extern "C" {
    pub fn load_alphabet() -> *mut *mut image;
}
extern "C" {
    pub fn get_network_image(net: *mut network) -> image;
}
extern "C" {
    pub fn network_predict(net: *mut network, input: *mut f32) -> *mut f32;
}
extern "C" {
    pub fn network_width(net: *mut network) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn network_height(net: *mut network) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn network_predict_image(net: *mut network, im: image) -> *mut f32;
}
extern "C" {
    pub fn network_detect(
        net: *mut network,
        im: image,
        thresh: f32,
        hier_thresh: f32,
        nms: f32,
        dets: *mut detection,
    );
}
extern "C" {
    pub fn get_network_boxes(
        net: *mut network,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thresh: f32,
        hier: f32,
        map: *mut ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
        num: *mut ::std::os::raw::c_int,
    ) -> *mut detection;
}
extern "C" {
    pub fn free_detections(dets: *mut detection, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_network_state(net: *mut network, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_labels(filename: *mut ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn do_nms_obj(
        dets: *mut detection,
        total: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        thresh: f32,
    );
}
extern "C" {
    pub fn do_nms_sort(
        dets: *mut detection,
        total: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        thresh: f32,
    );
}
extern "C" {
    pub fn make_matrix(rows: ::std::os::raw::c_int, cols: ::std::os::raw::c_int) -> matrix;
}
extern "C" {
    pub fn free_image(m: image);
}
extern "C" {
    pub fn train_network(net: *mut network, d: data) -> f32;
}
extern "C" {
    pub fn load_data_in_thread(args: load_args) -> pthread_t;
}
extern "C" {
    pub fn load_data_blocking(args: load_args);
}
extern "C" {
    pub fn get_paths(filename: *mut ::std::os::raw::c_char) -> *mut list;
}
extern "C" {
    pub fn hierarchy_predictions(
        predictions: *mut f32,
        n: ::std::os::raw::c_int,
        hier: *mut tree,
        only_leaves: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn change_leaves(t: *mut tree, leaf_list: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn find_int_arg(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_char,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_float_arg(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_char,
        def: f32,
    ) -> f32;
}
extern "C" {
    pub fn find_arg(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_char_arg(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_char,
        def: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basecfg(cfgfile: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn find_replace(
        str: *mut ::std::os::raw::c_char,
        orig: *mut ::std::os::raw::c_char,
        rep: *mut ::std::os::raw::c_char,
        output: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn free_ptrs(ptrs: *mut *mut ::std::os::raw::c_void, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fgetl(fp: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strip(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sec(clocks: clock_t) -> f32;
}
extern "C" {
    pub fn list_to_array(l: *mut list) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn top_k(
        a: *mut f32,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn read_map(filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn error(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn max_index(a: *mut f32, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn max_int_index(
        a: *mut ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sample_array(a: *mut f32, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random_index_order(
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_list(l: *mut list);
}
extern "C" {
    pub fn mse_array(a: *mut f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn variance_array(a: *mut f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn mag_array(a: *mut f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scale_array(a: *mut f32, n: ::std::os::raw::c_int, s: f32);
}
extern "C" {
    pub fn mean_array(a: *mut f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn sum_array(a: *mut f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn normalize_array(a: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_intlist(
        s: *mut ::std::os::raw::c_char,
        n: *mut ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand_size_t() -> usize;
}
extern "C" {
    pub fn rand_normal() -> f32;
}
extern "C" {
    pub fn rand_uniform(min: f32, max: f32) -> f32;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
